import java.util.*;

class Solution {
    private int[] dp;

    private boolean help(int i, String s, Set<String> word) {
        if (i == s.length()) {
            return true;
        }

        if (dp[i] != -1) {
            return dp[i] == 1;
        }

        StringBuilder temp = new StringBuilder();
        for (int j = i; j < s.length(); j++) 
        {
            temp.append(s.charAt(j));
            if (word.contains(temp.toString()) && help(j + 1, s, word)) 
            {
                dp[i] = 1;
                return true;
            }
        }

        dp[i] = 0;
        return false;
    }

    public boolean wordBreak(String s, List<String> wordDict) {
        Set<String> wordSet = new HashSet<>(wordDict);
        dp = new int[s.length()];
        Arrays.fill(dp, -1);

        return help(0, s, wordSet);
    }
}
