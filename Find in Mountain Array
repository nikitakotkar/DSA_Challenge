class Solution {
    public int findInMountainArray(int target, MountainArray mountainArr) {
        int peakIndex = findPeakIndex(mountainArr);
        
        // Search in the left of the peak
        int leftResult = binarySearch(mountainArr, target, 0, peakIndex, true);
        if (leftResult != -1) {
            return leftResult;
        }

        // Search in the right of the peak
        return binarySearch(mountainArr, target, peakIndex + 1, mountainArr.length() - 1, false);
    }

    private int binarySearch(MountainArray mountainArr, int target, int start, int end, boolean ascending) {
        while (start <= end) {
            int mid = start + (end - start) / 2;
            int midValue = mountainArr.get(mid);

            if (midValue == target) {
                return mid;
            } else if ((midValue < target && ascending) || (midValue > target && !ascending)) {
                start = mid + 1;
            } else {
                end = mid - 1;
            }
        }

        return -1; // Not found
    }

    private int findPeakIndex(MountainArray mountainArr) {
        int start = 0;
        int end = mountainArr.length() - 1;

        while (start < end) {
            int mid = start + (end - start) / 2;

            if (mountainArr.get(mid) < mountainArr.get(mid + 1)) {
                start = mid + 1;
            } else {
                end = mid;
            }
        }

        return start;
    }
}
