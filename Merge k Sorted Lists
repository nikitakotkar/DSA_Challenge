/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        // Check for edge case
        if (lists == null || lists.length == 0) {
            return null;
        }

        // Convert linked lists to ArrayList of values
        ArrayList<Integer> combinedArrayList = new ArrayList<>();
        for (ListNode head : lists) 
        {
            ListNode current = head;
            while (current != null) 
            {
                combinedArrayList.add(current.val);
                current = current.next;
            }
        }

        // Sort the ArrayList
        Collections.sort(combinedArrayList);

        // Build the sorted linked list
        ListNode dummy = new ListNode(0);
        ListNode current = dummy;

        for (int val : combinedArrayList) 
        {
            current.next = new ListNode(val);
            current = current.next;
        }

        return dummy.next;
    }
}
