class Solution {
    public int minimumCost(int[] start, int[] target, int[][] specialRoads) {
        
        int n = specialRoads.length;

        // road start
        int[][] rs = new int[n][2];
        // road end
        int[][] re = new int[n][2];
        int m = 2*n+2;
        int MX = 100000007;

        int[][] wt = new int[2*n+2][2*n+2];

        for(int i=0; i<m; i++){
            for(int j=0; j<m; j++)
                wt[i][j] = MX;
        }            

        for(int i=0; i<n; i++){
            rs[i][0] = specialRoads[i][0];
            rs[i][1] = specialRoads[i][1];
            re[i][0] = specialRoads[i][2];
            re[i][1] = specialRoads[i][3];

            int d = Math.abs(re[i][0] - rs[i][0]) + Math.abs(re[i][1] - rs[i][1]);
            wt[i][n+i] = Math.min(specialRoads[i][4], d);
        }        

        // source index
        int si = 2*n;

        // target index
        int ei = si+1;

        int d = Math.abs(start[0] - target[0]) + Math.abs(start[1] - target[1]);
        
        wt[si][ei] = d;

        // calculate distance from start to every special road start
        for(int i=0; i<n; i++){
            d = Math.abs(start[0] - rs[i][0]) + Math.abs(start[1] - rs[i][1]);            
            wt[si][i] = d;
        }

        //calculate distance from every special road end to target
        for(int i=0; i<n; i++){
            d = Math.abs(target[0] - re[i][0]) + Math.abs(target[1] - re[i][1]);            
            wt[n+i][ei] = d;
        }


        // calculate distance from every special road end to every special road start
        for(int i=0; i<n; i++) {
            for(int j=0; j<n; j++){
                if( i == j)
                    continue;
                d = Math.abs(re[i][0] - rs[j][0]) + Math.abs(re[i][1] - rs[j][1]);
                wt[n+i][j] = d;
            }
        }

        // apply floyd warshall's algorithm
        for(int k=0; k<m; k++){
            for(int i=0; i<m; i++){
                for(int j=0; j<m; j++){
                    if(wt[i][k] + wt[k][j] < wt[i][j])
                        wt[i][j] = wt[i][k] + wt[k][j];
                }
            }
        }

        return wt[si][ei];
    }
}
